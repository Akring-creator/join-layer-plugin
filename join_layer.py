# -*- coding: utf-8 -*-
"""
/***************************************************************************
 JoinLayer
                                 A QGIS plugin
 Join
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-03-16
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Muhammad Ihsan
        email                : ihsan@upi.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox
from qgis.core import QgsProject, QgsVectorLayer
import geopandas as gpd
from collections import defaultdict
from shapely.geometry import LineString, MultiLineString, Point

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .join_layer_dialog import JoinLayerDialog
import os.path


class JoinLayer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'JoinLayer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Join Layer')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('JoinLayer', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/join_layer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Join Layer'),
            callback=self.run,
            parent=self.iface.mainWindow())
        
        self.QMessageBox = QMessageBox()

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Join Layer'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select   output file ","", '*.shp')
        self.dlg.lineEdit.setText(filename)

    def update_comboboxes(self):
    # Ambil semua layer yang merupakan vektor dan urutkan berdasarkan nama
        layers = sorted(
            [layer for layer in QgsProject.instance().mapLayers().values() if isinstance(layer, QgsVectorLayer)],
            key=lambda layer: layer.name().lower()  # Mengurutkan tanpa memperhatikan huruf besar/kecil
        )

        # Bersihkan isi comboBox pertama dan isi dengan layer vektor yang sudah diurutkan
        self.dlg.comboBox.clear()
        self.dlg.comboBox.addItems([layer.name() for layer in layers])

        # Bersihkan isi comboBox kedua dan isi dengan layer vektor yang sudah diurutkan
        self.dlg.comboBox_2.clear()
        self.dlg.comboBox_2.addItems([layer.name() for layer in layers])

    
    def get_selected_layers(self):
    # Ambil nama layer yang dipilih di comboBox pertama dan kedua
        centerline_layer_combobox = self.dlg.comboBox.currentText()
        polygon_layer_combobox = self.dlg.comboBox_2.currentText()

        # Ambil semua layer vektor dari proyek QGIS
        layers = {layer.name(): layer for layer in QgsProject.instance().mapLayers().values() if isinstance(layer, QgsVectorLayer)}

        # Dapatkan objek layer berdasarkan nama yang dipilih
        centerline_layer = layers.get(centerline_layer_combobox, None)
        polygon_layer = layers.get(polygon_layer_combobox, None)

        return centerline_layer, polygon_layer

    def filter_centerline_by_connection(self, centerline_gdf):
        vertices = defaultdict(int)
        lines = []

        for geom in centerline_gdf.geometry:
            if isinstance(geom, LineString):
                lines.append(geom)
                coords = list(geom.coords)
                for coord in [coords[0], coords[-1]]:
                    vertices[coord] += 1
            elif isinstance(geom, MultiLineString):
                for line in geom.geoms:
                    lines.append(line)
                    coords = list(line.coords)
                    for coord in [coords[0], coords[-1]]:
                        vertices[coord] += 1

        single_connection_points = {Point(coord) for coord, count in vertices.items() if count == 1}
        
        filtered_lines = []
        for line in lines:
            coords = list(line.coords)
            start, end = Point(coords[0]), Point(coords[-1])
            if not (start in single_connection_points or end in single_connection_points):
                filtered_lines.append(line)
        
        return filtered_lines

    def split_with_centerline(self, poly_gdf, centerline_gdf):
        final_geoms = []
        if not centerline_gdf.empty:
            all_lines = centerline_gdf.geometry.union_all()
            cutting_line = all_lines.buffer(0.1)
            
            for idx, poly in poly_gdf.iterrows():
                if poly.geometry.intersects(cutting_line):
                    split_parts = poly.geometry.difference(cutting_line)
                    if split_parts.geom_type == 'MultiPolygon':
                        for part in split_parts.geoms:
                            if part.is_valid and not part.is_empty:
                                final_geoms.append(part)
                    elif split_parts.geom_type == 'Polygon' and split_parts.is_valid and not split_parts.is_empty:
                        final_geoms.append(split_parts)
                else:
                    if poly.geometry.is_valid and not poly.geometry.is_empty:
                        final_geoms.append(poly.geometry)
        return gpd.GeoDataFrame(geometry=final_geoms, crs=poly_gdf.crs)
    
    def run(self):
        """Run method that performs all the real work"""
        data = {'Nama': ['Layer1', 'Layer2', 'Layer3'],
        'Tipe': ['Polygon', 'Point', 'Line'],
        'Jumlah Fitur': [100, 50, 75]}


        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = JoinLayerDialog()
            self.dlg.pushButton.clicked.connect(self.select_output_file)

        self.update_comboboxes()
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            centerline_layer, poly_layer =  self.get_selected_layers()
            poly_path = poly_layer.source()
            centerline_path = centerline_layer.source()
            
            poly_gdf = gpd.read_file(poly_path)
            centerline_gdf = gpd.read_file(centerline_path)

            # Filter centerline
            filtered_lines = self.filter_centerline_by_connection(centerline_gdf)
            filtered_centerline_gdf = gpd.GeoDataFrame(geometry=filtered_lines, crs=centerline_gdf.crs)

            # Process splitting
            final_gdf = self.split_with_centerline(poly_gdf, filtered_centerline_gdf)
            output_path= self.dlg.lineEdit.text()
            
            final_gdf.to_file(output_path)

            self.QMessageBox.information(self.iface.mainWindow(), "Success", f"Splitting completed! Saved at {output_path}")
            self.iface.addVectorLayer(output_path, "Split Result", "ogr")

            self.iface.messageBar().pushMessage(f"{output_path}")

